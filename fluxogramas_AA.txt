
Versão Ideia Fabiano:

INIT:
- Inicializa a população de N variáveis de projeto

PERTURBAÇÕES:
- Gera um p'
- Para cada variável de projeto, gera P perturbações (todas com o mesmo p'. A perturbação será diferente porque há diferentes sigmas e estes são aplicados na distribuição normal)
- Para calcular as P adaptabilidades da variável p, perturba todas as variáveis da população ao mesmo tempo com o p' e calcula o f(x). 

PROBLEMA: todas adaptabilidades de p calculadas usaram o p', então na hora de ordenar e escolher um p novo, sempre será p'. Nem seria preciso então calcular as P adaptabilidades pra ele 

SUGESTÃO: E se gerasse vários p' pra escolher qual o melhor? Teria sentido perturbar todas as variáveis ao mesmo tempo?

ORDENA E CONFIRMA:
- Para cada variável, ordena com base no f(x) e escolhe uma perturbação para ser aceita, substituindo o valor da variável.
- Para o p, se houvesse somente 1 p', já seria esse que nem seria escolhido. Mas se houvessem diversos p', aí poderia escolher dentre esses.
- Após confirmar uma alteração por variável, calcula o f(x) da população de novo.








Versão com a porcentagem inicial (p1):

INIT:
- Inicializa a população de N variáveis de projeto

PERTURBAÇÕES:
- Perturba as variáveis de projeto igual é no GEOreal2_P_DS: A partir de um p1 inicial, usa esse valor para a 1ª perturbação, depois vai dividindo o p por 10 até completar as P perturbações. Serão geradas P perturbações com diferentes valores de p.
- Como calcular as adaptabilidades de p1? 

SUGESTÃO: Poderia gerar diversos p1', só que aí para cada variável teria que ir dividindo por 10, o que geraria muitas perturbações.
SUGESTÃO: Gera 2 adaptabilidades só. Perturba todas as variáveis ao mesmo tempo com p1, calculando f(x), e depois perturba todas as variáveis ao mesmo tempo com p1' através de LogNormal(4, 0.2). Só que essas perturbações teriam porcentagem 50 por ex, não iriam traduzir bem qual é o melhor entre p1 e p1'.

OBSERAÇÃO: Esse algoritmo que vai dividindo o p por 10 durante P vezes (real2_P_DS) é muito bom porque permite perturbações utilizando diversas porcentagems (p, p/10, p/100000, etc). Atinge 0,0001 na Schwefel

ORDENA E CONFIRMA:
- Para cada variável, ordena as perturbações com base no f(x) e escolhe uma perturbação para ser aceita, substituindo o xi.
- Para a variável p1, ordena as perturbações com base no f(x) e escolhe uma perturbação para ser aceita, só que todas foram feitas com o mesmo p1', então esse seria escolhido, nem precisaria ter calculado as adaptabilidades.
- Após confirmar uma alteração por variável, calcula o f(x) da população de novo.

SUGESTÃO: Para a variável p1, escolhe qual f(x) foi melhor, se foi o de p1 ou se foi o de p1'.




TESTE: Alterando sempre p1 = p1' através de LogNormal(4, 0.2) dá no mesmo